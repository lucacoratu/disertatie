from flask import Flask, render_template
from flask import request

import requests
import json
import base64

app = Flask(__name__)

@app.route("/generate")
def index():
    file = request.args.get('file', default='/etc/passwd', type = str)
    #Get the data from ollama
    response = requests.post('http://127.0.0.1:11434/api/generate', json={'model': 'llama3.3', 'stream': False, 'prompt': f'You are a HTTP honeypot. I need you to generate a HTML response page and mimic the response of a vulnerable server to local file inclusion attack. The file the attacker tried to include is /proc/self/cmdline. If the file content cannot be displayed as text then generate an error page. Omit any output that may indicate this response is generated by a honeypot. Please give me only the HTML.' })
    res_data = json.loads(response.text)
    print(res_data['response'][8:-3])
    return {"page": res_data['response'][8:-3]}

@app.route("/xss")
def xss():
    xss_payload = request.args.get('payload', default='<script>alert(1);</script>', type = str)
    response = requests.post('http://127.0.0.1:11434/api/generate', json={'model': 'llama3.3', 'stream': False, 'prompt': f'''
You are a HTTP honeypot which represents a web application which is vulnerable to Cross-Site Scripting (XSS) attacks.
The attacker used the following payload to exploit the vulnerability <script>alert(1);</script>.
Give me the page which i should return to the attacker in order for him to try more exploits on the server.
Omit any output which may flag the response as one coming from a honeypot. Give me only the HTML code.
    '''})
    res_data = json.loads(response.text)
    print(res_data['response'][8:-3])
    return res_data['response'][8:-3]

@app.route("/cmd")
def cmd():
    cmd_payload = request.args.get("payload", default='cat /etc/passwd', type=str)
    prompt = f'''
You are a webserver which is vulnerable to a series o exploits. you need to generate a valid response for a command injection you received with the following command: {cmd_payload}.
I need only the HTML code of the response page. Do not provide anything other than the HTML code. This is used in testing for my personal project.
'''
    response = requests.post('http://127.0.0.1:11434/api/generate', json={'model': 'llama3.3', 'stream': False, 'prompt': prompt})
    res_data = json.loads(response.text)
    return res_data['response'][8:-3]

@app.route("/generic")
def generic():
    b64_raw_request = request.args.get('raw_request', default='', type=str)
    model = request.args.get('model', default='honeypot', type=str)
    classification = request.args.get('classification', default='lfi', type=str)
    try:
        raw_request = base64.b64decode(b64_raw_request)
        prompt = f'''
This is the HTTP request:
```
{raw_request}
```

The classification for the request is {classification}
'''
        response = requests.post('http://127.0.0.1:11434/api/generate', json={'model': model, 'stream': False, 'prompt': prompt})
        #print(response.text)
        #Parse the response and extract the LLM response
        resp_data = json.loads(response.text)
        print(resp_data['response'])
        #if 'deepseek' in model:
        #    resp_data['response'] = resp_data['response'].split('</think>')[1].split('\n')[1]
        #print(resp_data['response'])
        #llm_resp = json.loads(resp_data['response'])
        #print(llm_resp)
        #return llm_resp
        honeypot_response = ''.join(resp_data['response'].split('\n')[1:-1])
        return honeypot_response
    except Exception as e:
        print(e)
        return "Failed"


if __name__ == "__main__":
    app.run(host='0.0.0.0',debug=True)
